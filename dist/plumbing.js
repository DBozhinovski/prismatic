// Generated by CoffeeScript 1.6.3
(function() {
  var Plumbing, Q, exec, fs, spawn, _ref;

  _ref = require("child_process"), spawn = _ref.spawn, exec = _ref.exec;

  Q = require("q");

  fs = require("fs");

  Plumbing = (function() {
    function Plumbing() {}

    Plumbing.get = function() {
      return {
        instance: function(options) {
          var deferred,
            _this = this;
          deferred = Q.defer();
          exec("ffmpeg -loglevel error -t 1 " + (options.filter(function(n) {
            return n;
          }).slice(0, -1).join(' ')) + " -f null /dev/null", function(error, stdout, stderr) {
            if (error) {
              return deferred.reject(error.toString().trim());
            } else if (stderr) {
              return deferred.reject(stderr.toString().trim());
            } else {
              return fs.writeFile('dummy.sh', "ffmpeg " + (options.filter(function(n) {
                return n;
              }).join(' ')), function(error) {
                _this.ff = spawn("sh", ["dummy.sh"]);
                _this.ff.stderr.on("data", function(out) {
                  return deferred.notify(out);
                });
                return _this.ff.stdout.on("close", function(out) {
                  return deferred.resolve(out);
                });
              });
            }
          });
          return deferred.promise;
        },
        meta: function(path) {
          var deferred;
          deferred = Q.defer();
          exec("ffprobe -v quiet -print_format json -show_format -show_streams " + path, function(error, stdout, stderr) {
            if (error) {
              return deferred.reject(error);
            } else {
              return deferred.resolve(stdout);
            }
          });
          return deferred.promise;
        }
      };
    };

    return Plumbing;

  })();

  module.exports = Plumbing;

}).call(this);
